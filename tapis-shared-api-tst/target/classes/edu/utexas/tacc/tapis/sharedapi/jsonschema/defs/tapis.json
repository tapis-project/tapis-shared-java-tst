{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "description": "JSON schema for defining all Tapis inputs and outputs",
  "type": "object",
  "additionalProperties" : false,
  "definitions": {
    "ApplicationParameterStringValue": {
      "title": "ApplicationParameterStringValue",
      "description": "An ApplicationParameter representing a string value",
      "type": "object",
      "properties": {
        "type": {
          "description": "The primary type of this parameter",
          "type": "string",
          "default": "STRING"
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationArgumentValue"
        }
      ]
    },
    "ApplicationParameterBooleanValue": {
      "title": "ApplicationParameterBooleanValue",
      "description": "An ApplicationParameter representing a boolean value",
      "type": "object",
      "properties": {
        "type": {
          "description": "The primary type of this parameter",
          "type": "string",
          "default": "bool"
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AbstractApplicationParameterValue"
        }
      ]
    },
    "ApplicationParameterNumericValue": {
      "title": "ApplicationParameterNumericValue",
      "description": "An ApplicationParameter representing a numeric value",
      "type": "object",
      "properties": {
        "type": {
          "description": "The primary type of this parameter",
          "type": "string",
          "default": "number"
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AbstractApplicationParameterValue"
        }
      ]
    },
    "ApplicationParameterFlagValue": {
      "title": "ApplicationParameterFlagValue",
      "description": "An ApplicationParameter representing a flag value",
      "type": "object",
      "properties": {
        "type": {
          "description": "The primary type of this parameter",
          "type": "string",
          "default": "flag"
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AbstractApplicationParameterValue"
        }
      ]
    },
    "JobStatusType": {
      "title": "JobStatusType",
      "type": "string",
      "enum": [
        "ACCEPTED",
        "PENDING",
        "PROCESSING_INPUTS",
        "STAGING_INPUTS",
        "STAGED",
        "STAGING_JOB",
        "SUBMITTING",
        "QUEUED",
        "RUNNING",
        "CLEANING_UP",
        "ARCHIVING",
        "BLOCKED",
        "PAUSED",
        "FINISHED",
        "FAILED",
        "STOPPED"
      ]
    },
    "MonitorCheckResultType": {
      "title": "MonitorCheckResultType",
      "type": "string",
      "enum": [
        "FAILED",
        "PASSED",
        "UNKNOWN"
      ]
    },
    "term": {
      "title": "term",
      "type": "string",
      "enum": [
        "username",
        "email",
        "name"
      ]
    },
    "term3": {
      "title": "term3",
      "type": "string",
      "enum": [
        "username",
        "email",
        "name",
        "status"
      ]
    },
    "SystemCredentialType": {
      "title": "SystemCredentialType",
      "type": "string",
      "enum": [
        "LOGIN",
        "STORAGE"
      ]
    },
    "Client": {
      "title": "Client",
      "type": "object",
      "properties": {
        "key": {
          "description": "The API key for this client.",
          "type": "string"
        },
        "secret": {
          "description": "The API secret for this client.",
          "type": "string"
        },
        "callbackUrl": {
          "description": "Callback URL for OAuth authentication grant.",
          "type": "string"
        },
        "description": {
          "description": "Description of the client. This will be shown to users when authentication via OAuth web flows",
          "type": "string"
        },
        "name": {
          "description": "The name of the client.",
          "type": "string"
        },
        "tier": {
          "description": "The access tier for this client.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "secret",
        "callbackUrl",
        "description",
        "name",
        "tier"
      ]
    },
    "ClientSubscriptionTier": {
      "title": "ClientSubscriptionTier",
      "type": "string",
      "enum": [
        "BRONZE",
        "GOLD",
        "SILVER",
        "UNLIMITED"
      ]
    },
    "ClientRequest": {
      "title": "ClientRequest",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the client.",
          "type": "string"
        },
        "description": {
          "description": "Description of the client. This will be shown to users when authentication via OAuth web flows",
          "type": "string"
        },
        "tier": {
          "description": "The access tier for this client.",
          "$ref": "#/definitions/ClientSubscriptionTier",
          "default": "UNLIMITED"
        },
        "callbackUrl": {
          "description": "Callback URL for OAuth authentication grant.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "description",
        "tier",
        "callbackUrl"
      ]
    },
    "ClientAPISubscription": {
      "title": "ClientAPISubscription",
      "type": "object",
      "properties": {
        "apiContext": {
          "description": "The base url path of the API.",
          "type": "string"
        },
        "apiName": {
          "description": "The name of the API.",
          "type": "string"
        },
        "apiProvider": {
          "description": "The user who registered the API.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The current major version of the API. This is appended to the api_context to create the base API url.",
          "type": "string"
        },
        "status": {
          "description": "The current status of the API.",
          "$ref": "#/definitions/ClientAPISubscriptionStatusType"
        },
        "tier": {
          "description": "The access tier for this client.",
          "$ref": "#/definitions/ClientSubscriptionTier"
        }
      },
      "required": [
        "apiContext",
        "apiName",
        "apiProvider",
        "apiVersion",
        "status",
        "tier"
      ]
    },
    "ClientSubscriptionRequest": {
      "title": "ClientSubscriptionRequest",
      "type": "object",
      "properties": {
        "apiName": {
          "description": "The name of the API.",
          "type": "string"
        },
        "apiProvider": {
          "description": "The user who registered the API.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The current major version of the API. This is appended to the api_context to create the base API url.",
          "type": "string"
        },
        "tier": {
          "description": "The access tier for this client.",
          "$ref": "#/definitions/ClientSubscriptionTier"
        }
      },
      "required": [
        "apiName",
        "apiProvider",
        "apiVersion",
        "tier"
      ]
    },
    "SingleClientResponse": {
      "title": "SingleClientResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/Client"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "MultipleClientResponse": {
      "title": "MultipleClientResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "List of clients",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Client"
          }
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "EmptyClientResponse": {
      "title": "EmptyClientResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "MultipleSubscriptionResponse": {
      "title": "MultipleSubscriptionResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "List of subscriptions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientAPISubscription"
          }
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "SingleSubscriptionResponse": {
      "title": "SingleSubscriptionResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/ClientAPISubscription"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "EmptySubscriptionResponse": {
      "title": "EmptySubscriptionResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "ACL": {
      "title": "ACL",
      "type": "object",
      "properties": {
        "execute": {
          "description": "can execute",
          "type": "boolean"
        },
        "read": {
          "description": "can read",
          "type": "boolean"
        },
        "write": {
          "description": "can write",
          "type": "boolean"
        }
      },
      "required": [
        "execute",
        "read",
        "write"
      ]
    },
    "ApplicationSummary": {
      "title": "ApplicationSummary",
      "description": "An abbreviated Application object returned in request in application collection queries",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique id of this app. Comprised of the app name-version.",
          "type": "string"
        },
        "executionSystem": {
          "description": "The system id of the execution system where this app should run.",
          "type": "string"
        },
        "lastModified": {
          "description": "The date this application was last modified in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "The name of the application. The name does not have to be unique, but the combination of name and version does.",
          "type": "string"
        },
        "isPublic": {
          "description": "Whether the application is public or private.",
          "type": "boolean"
        },
        "revision": {
          "description": "The number of times this application has been revised.",
          "type": "integer",
          "format": "int64"
        },
        "shortDescription": {
          "description": "The short description of this application.",
          "type": "string"
        },
        "version": {
          "description": "The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "executionSystem",
        "lastModified",
        "name",
        "isPublic",
        "revision",
        "shortDescription",
        "version"
      ]
    },
    "SystemExecutionType": {
      "title": "SystemExecutionType",
      "type": "string",
      "enum": [
        "CLI",
        "CONDOR",
        "HPC"
      ]
    },
    "ApplicationParallelism": {
      "title": "ApplicationParallelism",
      "type": "string",
      "enum": [
        "PARALLEL",
        "PTHREAD",
        "SERIAL"
      ]
    },
    "Application": {
      "title": "Application",
      "description": "Applications are a self-describing representation of an executable software item. See the <a href=\"http://agaveapi.co/documentation/tutorials/app-management-tutorial/\">App Management Tutorial</a> for more information.",
      "type": "object",
      "properties": {
        "available": {
          "description": "Whether the application is available.",
          "type": "string"
        },
        "checkpointable": {
          "description": "Whether the application supports checkpointing.",
          "type": "string"
        },
        "defaultMaxRunTime": {
          "description": "The max execution time that should be used if none is given in a job description. Ignore if the system does not support schedulers.",
          "type": "string"
        },
        "defaultMemoryPerNode": {
          "description": "The default memory in GB to pass to the scheduler if none is given in the job description. This must be less than the max memory parameter in the target queue definition.",
          "type": "string"
        },
        "defaultNodeCount": {
          "description": "The number of nodes that should be used if none is given in a job description. Ignore if the system does not support schedulers.",
          "type": "string"
        },
        "defaultProcessorsPerNode": {
          "description": "The number of processors to pass to the scheduler if none are given in the job description. This must be 1 if the app is serial.",
          "type": "string"
        },
        "defaultQueue": {
          "description": "The queue on the execution system that should be used if none is given in a job description. Ignore if the system does not support schedulers.",
          "type": "string"
        },
        "deploymentPath": {
          "description": "The location in the user's default storage system containing the application wrapper and dependencies.",
          "type": "string"
        },
        "deploymentSystem": {
          "description": "The system id of the storage system where this app should run.",
          "type": "string"
        },
        "executionSystem": {
          "description": "The system id of the execution system where this app should run.",
          "type": "string"
        },
        "executionType": {
          "description": "The execution type of the application. If you're unsure, it's probably HPC.",
          "type": "string"
        },
        "helpURI": {
          "description": "The URL where users can go for more information about the app.",
          "type": "string"
        },
        "id": {
          "description": "Unique id of this app. Comprised of the app name-version.",
          "type": "string"
        },
        "icon": {
          "description": "The icon to associate with this app.",
          "type": "string"
        },
        "inputs": {
          "description": "The inputs files for this application. ",
          "type": "string"
        },
        "label": {
          "description": "The label to use when generating forms.",
          "type": "string"
        },
        "lastModified": {
          "description": "The date this application was last modified in ISO 8601 format.",
          "type": "string"
        },
        "longDescription": {
          "description": "The full text description of this input to use when generating forms.",
          "type": "string"
        },
        "modules": {
          "description": "An array of modules to load prior to the execution of the application.",
          "type": "string"
        },
        "name": {
          "description": "The name of the application. The name does not have to be unique, but the combination of name and version does.",
          "type": "string"
        },
        "ontology": {
          "description": "An array of ontology values describing this application.",
          "type": "string"
        },
        "outputs": {
          "description": "The outputs files for this application. ",
          "type": "string"
        },
        "parallelism": {
          "description": "The parallelism type of the application. If you're unsure, it's probably SERIAL.",
          "type": "string"
        },
        "parameters": {
          "description": "The inputs parameters for this application. ",
          "type": "string"
        },
        "isPublic": {
          "description": "Whether the application is public or private.",
          "type": "string"
        },
        "revision": {
          "description": "The number of times this application has been revised.",
          "type": "string"
        },
        "shortDescription": {
          "description": "The short description of this application.",
          "type": "string"
        },
        "tags": {
          "description": "An array of tags related to this application.",
          "type": "string"
        },
        "templatePath": {
          "description": "The path to the wrapper script relative to the deploymentPath.",
          "type": "string"
        },
        "testPath": {
          "description": "The path to the test script relative to the deploymentPath.",
          "type": "string"
        },
        "uuid": {
          "description": "The UUID of this application. UUID are 36 alphanumeric string.",
          "type": "string"
        },
        "version": {
          "description": "The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique.",
          "type": "string"
        }
      },
      "required": [
        "available",
        "checkpointable",
        "defaultMaxRunTime",
        "defaultMemoryPerNode",
        "defaultNodeCount",
        "defaultProcessorsPerNode",
        "defaultQueue",
        "deploymentPath",
        "deploymentSystem",
        "executionSystem",
        "executionType",
        "helpURI",
        "id",
        "icon",
        "inputs",
        "label",
        "lastModified",
        "longDescription",
        "modules",
        "name",
        "ontology",
        "outputs",
        "parallelism",
        "parameters",
        "isPublic",
        "revision",
        "shortDescription",
        "tags",
        "templatePath",
        "testPath",
        "uuid",
        "version"
      ]
    },
    "ApplicationInput": {
      "title": "ApplicationInput",
      "description": "App inputs describe data inputs supported by your app. Each input can represent one or more files or folders. Inptus can be optional or required and may physically reside anywhere accessible using any of the data protocols supported by Agave.  <a href=\"http://agaveapi.co/documentation/tutorials/app-management-tutorial/#app-inputs\">Read more.</a>",
      "type": "object",
      "properties": {
        "semantics": {
          "description": "The ontologies for this input. ",
          "$ref": "#/definitions/ApplicationArgumentDataSemantics"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationArgument"
        }
      ]
    },
    "ApplicationArgumentDetails": {
      "title": "ApplicationArgumentDetails",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of this input.",
          "type": "string"
        },
        "label": {
          "description": "The label for this input",
          "type": "string"
        },
        "argument": {
          "description": "The command line value of this input (ex -n, --name, -name, etc)",
          "type": "string"
        },
        "showArgument": {
          "description": "Whether the argument value should be passed into the wrapper at run time",
          "type": "boolean",
          "default": false
        },
        "repeatArgument": {
          "description": "Whether the argument value should be repeated in front of each user-supplied input before injection into the wrapper template at runtime",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "showArgument",
        "repeatArgument"
      ]
    },
    "ApplicationArgumentValue": {
      "title": "ApplicationArgumentValue",
      "description": "Describes the validation, default value, and primary types associated with this ApplicationArgument",
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value for this parameter. The type will be determined by the value.type field.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enquote": {
          "description": "Whether the argument value should be surrounded by quotation marks before injection into the wrapper template at runtime",
          "type": "boolean",
          "default": false
        },
        "order": {
          "description": "The order in which this parameter should be printed when generating an execution command for forked execution. This will also be the order in which paramters are returned in the response json.",
          "type": "integer",
          "default": 0,
          "format": "int64"
        },
        "required": {
          "description": "Is this parameter required? If visible is false, this must be true.",
          "type": "boolean",
          "default": false
        },
        "validator": {
          "description": "The regular expression used to validate this parameter value. For enumerations, separate values with |",
          "type": "string"
        },
        "visible": {
          "description": "Should this parameter be visible? If not, there must be a default and it will be required.",
          "type": "boolean",
          "default": true
        }
      },
      "required": [
        "enquote",
        "order",
        "required",
        "visible"
      ]
    },
    "AbstractApplicationParameterValue": {
      "title": "AbstractApplicationParameterValue",
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value for this parameter. The type will be determined by the value.type field.",
          "type": "string"
        },
        "enumValues": {
          "description": "An array of enumerated object values.",
          "type": "string"
        },
        "enquote": {
          "description": "Whether the argument value should be surrounded by quotation marks before injection into the wrapper template at runtime",
          "type": "boolean",
          "default": false
        },
        "order": {
          "description": "The order in which this parameter should be printed when generating an execution command for forked execution. This will also be the order in which paramters are returned in the response json.",
          "type": "integer",
          "default": 0,
          "format": "int64"
        },
        "required": {
          "description": "Is this parameter required? If visible is false, this must be true.",
          "type": "boolean",
          "default": false
        },
        "type": {
          "description": "The type of this parameter value. (Acceptable values are: \"string\", \"number\", \"enumeration\", \"bool\", \"flag\")",
          "type": "string",
          "default": "string"
        },
        "validator": {
          "description": "The regular expression used to validate this parameter value. For enumerations, separate values with |",
          "type": "string"
        },
        "visible": {
          "description": "Should this parameter be visible? If not, there must be a default and it will be required.",
          "type": "boolean",
          "default": true
        }
      },
      "required": [
        "enquote",
        "order",
        "required",
        "type",
        "visible"
      ]
    },
    "AgaveResponse": {
      "title": "AgaveResponse",
      "description": "This is the wrapper within which all API responses are returned.",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "status": {
          "description": "success or failure",
          "type": "string",
          "default": "success"
        },
        "version": {
          "description": "The current api version",
          "type": "string"
        }
      },
      "required": [
        "status",
        "version"
      ]
    },
    "EmptyApplicationResponse": {
      "title": "EmptyApplicationResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "empty result",
          "type": "string"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "MultipleApplicationResponse": {
      "title": "MultipleApplicationResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "response body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationSummary"
          }
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "PermissionType": {
      "title": "PermissionType",
      "type": "string",
      "enum": [
        "ALL",
        "EXECUTE",
        "NONE",
        "READ",
        "READ_EXECUTE",
        "READ_WRITE",
        "WRITE",
        "WRITE_EXECUTE"
      ]
    },
    "EmptyRemoteFileResponse": {
      "title": "EmptyRemoteFileResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "empty result",
          "type": "string"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "FileHistoryResponse": {
      "title": "FileHistoryResponse",
      "type": "object",
      "properties": {
        "result": {
          "description": "response body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoryEvent"
          }
        }
      },
      "required": [
        "result"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AgaveResponse"
        }
      ]
    },
    "MultipleRemoteFileResponse": {
      "title": "MultipleRemoteFileResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "response body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileInfo"
          }
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "FileInfo": {
      "title": "FileInfo",
      "description": "Basic metadata description of a remote file or folder",
      "type": "object",
      "properties": {
        "format": {
          "description": "The file type of the file.",
          "type": "string"
        },
        "lastModified": {
          "description": "The date this file was last modified in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "length": {
          "description": "The length of the file/folder.",
          "type": "integer",
          "format": "int64"
        },
        "mimeType": {
          "description": "The mime type of the file/folder. If unknown, it defaults to application/binary.",
          "type": "string"
        },
        "name": {
          "description": "The name of the file/folder.",
          "type": "string"
        },
        "path": {
          "description": "The absolute path to the file/folder.",
          "type": "string"
        },
        "permissions": {
          "description": "The remote system permission of the invoking user on the file/folder.",
          "type": "string"
        },
        "system": {
          "description": "The id of the system where this file lives.",
          "type": "string"
        },
        "type": {
          "description": "Whether it is a file or folder.",
          "$ref": "#/definitions/FileType",
          "default": "FILE"
        }
      },
      "required": [
        "format",
        "lastModified",
        "length",
        "mimeType",
        "name",
        "path",
        "permissions",
        "system",
        "type"
      ]
    },
    "SingleRemoteFileResponse": {
      "title": "SingleRemoteFileResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/FileInfo"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "MultiplePermissionResponse": {
      "title": "MultiplePermissionResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "One or more file permissions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilePermission"
          }
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "PermissionRequest": {
      "title": "PermissionRequest",
      "description": "A permission request for a given user on the given resource",
      "type": "object",
      "properties": {
        "username": {
          "description": "The name of the user for this permission object.",
          "type": "string"
        },
        "permission": {
          "description": "The permission to set",
          "$ref": "#/definitions/PermissionType"
        }
      },
      "required": [
        "username",
        "permission"
      ]
    },
    "PermissionStanza": {
      "title": "PermissionStanza",
      "description": "A minimal permission stanza defining read and write permissions",
      "type": "object",
      "properties": {
        "read": {
          "description": "Is the resource readable",
          "type": "boolean",
          "default": false
        },
        "write": {
          "description": "Is the resource writable",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "read",
        "write"
      ]
    },
    "FilePermissionRequest": {
      "title": "FilePermissionRequest",
      "description": "The permission to apply for the given user onthe given resource",
      "type": "object",
      "properties": {
        "recursive": {
          "description": "Should updated permissions be applied recursively. Defaults to false.",
          "type": "boolean"
        }
      },
      "required": [
        "recursive"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/PermissionRequest"
        }
      ]
    },
    "FileManagementActionType": {
      "title": "FileManagementActionType",
      "type": "string",
      "enum": [
        "MKDIR",
        "RENAME",
        "COPY",
        "MOVE"
      ]
    },
    "FileAction": {
      "title": "FileAction",
      "description": "A generic action to take on a file item",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action to perform on the file or folder.",
          "$ref": "#/definitions/FileManagementActionType"
        },
        "path": {
          "description": "Name of new directory or target file or folder.",
          "type": "string"
        }
      },
      "required": [
        "action",
        "path"
      ]
    },
    "Job": {
      "title": "Job",
      "type": "object",
      "properties": {
        "appId": {
          "description": "The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.",
          "type": "string"
        },
        "archive": {
          "description": "Whether the output from this job should be archived. If true, all new files created by this application's execution will be archived to the archivePath in the user's default storage system.",
          "type": "boolean"
        },
        "archivePath": {
          "description": "The path of the archive folder for this job on the user's default storage sytem.",
          "type": "string"
        },
        "archiveSystem": {
          "description": "The unique id of the storage system on which this job's output will be staged.",
          "type": "string"
        },
        "batchQueue": {
          "description": "The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.",
          "type": "string"
        },
        "endTime": {
          "description": "The date the job stopped running due to termination, completion, or error in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "executionSystem": {
          "description": "The system id of the execution system.",
          "type": "string"
        },
        "id": {
          "description": "The unique id of the job.",
          "type": "integer",
          "format": "int64"
        },
        "inputs": {
          "description": "The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user's default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.",
          "$ref": "#/definitions/JobInputs"
        },
        "localId": {
          "description": "The process or local job id of the job on the remote execution system.",
          "type": "string"
        },
        "memoryPerNode": {
          "description": "The requested memory for this application to run given in GB.",
          "type": "string"
        },
        "message": {
          "description": "The error message incurred when the job failed.",
          "type": "string"
        },
        "name": {
          "description": "The name of the job.",
          "type": "string"
        },
        "nodeCount": {
          "description": "The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.",
          "type": "integer",
          "format": "int64"
        },
        "notifications": {
          "description": "An array of notifications you wish to receive.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "outputPath": {
          "description": "Relative path of the job's output data.",
          "type": "string"
        },
        "owner": {
          "description": "The job owner.",
          "type": "string"
        },
        "parameters": {
          "description": "The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.",
          "$ref": "#/definitions/JobParameters"
        },
        "processorsPerNode": {
          "description": "The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.",
          "type": "integer",
          "format": "int64"
        },
        "maxRunTime": {
          "description": "The requested compute time needed for this application to complete given in HH:mm:ss format.",
          "type": "string"
        },
        "retries": {
          "description": "The number of retires it took to submit this job.",
          "type": "integer",
          "format": "int64"
        },
        "startTime": {
          "description": "The date the job started in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED",
          "type": "string"
        },
        "submitTime": {
          "description": "The date the job was submitted in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "workPath": {
          "description": "The directory on the remote execution system from which the job is running.",
          "type": "string"
        }
      },
      "required": [
        "appId",
        "archive",
        "archivePath",
        "archiveSystem",
        "batchQueue",
        "endTime",
        "executionSystem",
        "id",
        "inputs",
        "localId",
        "memoryPerNode",
        "message",
        "name",
        "nodeCount",
        "notifications",
        "outputPath",
        "owner",
        "parameters",
        "processorsPerNode",
        "maxRunTime",
        "retries",
        "startTime",
        "status",
        "submitTime",
        "workPath"
      ]
    },
    "JobRequest": {
      "title": "JobRequest",
      "description": "A request to run a registered app.",
      "type": "object",
      "properties": {
        "appId": {
          "description": "The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.",
          "type": "string"
        },
        "archive": {
          "description": "Whether the output from this job should be archived. If true, all new files created by this application's execution will be archived to the archivePath in the user's default storage system.",
          "type": "boolean",
          "default": true
        },
        "archivePath": {
          "description": "The path of the archive folder for this job on the user's default storage sytem.",
          "type": "string"
        },
        "archiveSystem": {
          "description": "The unique id of the storage system on which this job's output will be staged.",
          "type": "string"
        },
        "batchQueue": {
          "description": "The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.",
          "type": "string"
        },
        "inputs": {
          "description": "The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user's default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.",
          "type": "object"
        },
        "memoryPerNode": {
          "description": "The requested memory for this application to run given in GB.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the job.",
          "type": "string"
        },
        "nodeCount": {
          "description": "The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.",
          "type": "integer",
          "format": "int64"
        },
        "notifications": {
          "description": "An array of notifications you wish to receive.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "parameters": {
          "description": "The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.",
          "type": "object"
        },
        "processorsPerNode": {
          "description": "The number of processors this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.",
          "type": "integer",
          "format": "int64"
        },
        "maxRunTime": {
          "description": "The requested compute time needed for this application to complete given in HH:mm:ss format.",
          "type": "string"
        }
      },
      "required": [
        "appId",
        "archive",
        "name",
        "notifications"
      ]
    },
    "JobHistory": {
      "title": "JobHistory",
      "type": "object",
      "properties": {
        "created": {
          "description": "The date of the event.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "A brief description of the event details.",
          "type": "string"
        },
        "status": {
          "description": "The status of the job after this event.",
          "type": "string"
        }
      },
      "required": [
        "created",
        "description",
        "status"
      ]
    },
    "JobSubmission": {
      "title": "JobSubmission",
      "description": "This represents the request made to the Agave jobs api to run a registered application.",
      "type": "object",
      "properties": {
        "archive": {
          "description": "Whether the output from this job should be archived. If true, all new files created by this application's execution will be archived to the archivePath in the user's default storage system.",
          "type": "boolean"
        },
        "archivePath": {
          "description": "The path of the archive folder for this job on the archiveSystem. Defaults to the user's default storage system.",
          "type": "string"
        },
        "archiveSystem": {
          "description": "The system on which the job data will be archived",
          "type": "string"
        },
        "inputs": {
          "description": "The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user's default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.",
          "type": "string"
        },
        "name": {
          "description": "The name of the job.",
          "type": "string"
        },
        "maxMemory": {
          "description": "The maximum amount of memory needed for this application to run given in GB.",
          "type": "string"
        },
        "nodeCount": {
          "description": "The number of nodes this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.",
          "type": "integer",
          "format": "int64"
        },
        "notifications": {
          "description": "An array of notifications you wish to receive.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "parameters": {
          "description": "The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.",
          "type": "object"
        },
        "processorsPerNode": {
          "description": "The number of processors this application should utilize while running.",
          "type": "integer",
          "format": "int64"
        },
        "batchQueue": {
          "description": "The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.",
          "type": "string"
        },
        "maxRunTime": {
          "description": "The estimated compute time needed for this application to complete given in hh:mm:ss format.",
          "type": "string"
        },
        "appId": {
          "description": "The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.",
          "type": "string"
        }
      },
      "required": [
        "archive",
        "archivePath",
        "archiveSystem",
        "inputs",
        "name",
        "maxMemory",
        "nodeCount",
        "notifications",
        "parameters",
        "processorsPerNode",
        "batchQueue",
        "maxRunTime",
        "appId"
      ]
    },
    "JobParameters": {
      "title": "JobParameters",
      "type": "object",
      "properties": {
        "parameter1": {
          "description": "One or more parameters identified in the description of the app you're running. ",
          "type": "string"
        }
      },
      "required": [
        "parameter1"
      ]
    },
    "JobInputs": {
      "title": "JobInputs",
      "type": "object",
      "properties": {
        "parameter1": {
          "description": "One or more inputs identified in the description of the app you're running. ",
          "type": "string"
        }
      },
      "required": [
        "parameter1"
      ]
    },
    "JobSummary": {
      "title": "JobSummary",
      "type": "object",
      "properties": {
        "appId": {
          "description": "The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.",
          "type": "string"
        },
        "endTime": {
          "description": "The date the job ended in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "executionSystem": {
          "description": "The system id of the execution system.",
          "type": "string"
        },
        "id": {
          "description": "The unique id of the job.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the job.",
          "type": "string"
        },
        "owner": {
          "description": "The job owner.",
          "type": "string"
        },
        "startTime": {
          "description": "The date the job started in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED",
          "type": "string"
        }
      },
      "required": [
        "appId",
        "endTime",
        "executionSystem",
        "id",
        "name",
        "owner",
        "startTime",
        "status"
      ]
    },
    "JobStatusSummary": {
      "title": "JobStatusSummary",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique id of the job.",
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "description": "The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED",
          "type": "string"
        }
      },
      "required": [
        "id",
        "status"
      ]
    },
    "Notification": {
      "title": "Notification",
      "type": "object",
      "properties": {
        "event": {
          "description": "The event you wish to recieve a notification about. Specify * for all events.",
          "type": "string"
        },
        "persistent": {
          "description": "Whether this event should remain active after it triggers the first time.",
          "type": "boolean"
        },
        "url": {
          "description": "The URI to notify when the import is complete. This can be an email address or URL. If a URL is given, a POST will be made to this address. URL templating is supported. Valid template values are: ${JOB_STATUS}, ${JOB_URL}, ${JOB_ID}, ${JOB_SYSTEM}, ${JOB_NAME}, ${JOB_START_TIME}, ${JOB_END_TIME}, ${JOB_SUBMIT_TIME}, ${JOB_ARCHIVE_PATH}, ${JOB_ARCHIVE_URL}, ${JOB_ERROR}",
          "type": "string"
        }
      },
      "required": [
        "event",
        "persistent",
        "url"
      ]
    },
    "JobActionType": {
      "title": "JobActionType",
      "description": "The type of action to perform on a job.",
      "type": "string",
      "enum": [
        "RESUBMIT",
        "STOP"
      ]
    },
    "JobAction": {
      "title": "JobAction",
      "description": "Requests that a management action take place against a job.",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action to perform on the job.",
          "$ref": "#/definitions/JobActionType"
        }
      },
      "required": [
        "action"
      ]
    },
    "Metadata": {
      "title": "Metadata",
      "type": "object",
      "properties": {
        "associationIds": {
          "description": "UUIDs of associated Agave entities, including the Data to which this Metadata belongs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created": {
          "description": "A timestamp indicating when this Metadata was created in the metadata store.",
          "type": "string",
          "format": "date-time"
        },
        "internalUsername": {
          "description": "The name of the Internal User, if any, who owns this metadata.",
          "type": "string"
        },
        "lastUpdated": {
          "description": "A timestamp indicating when this Metadata was last updated in the metadata store.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "The name of this metadata",
          "type": "string"
        },
        "owner": {
          "description": "The API user who owns this Metadata.",
          "type": "string"
        },
        "uuid": {
          "description": "The UUID for this Metadata.",
          "type": "string"
        },
        "value": {
          "description": "A free text or JSON string containing the metadata stored for the given associationIds",
          "type": "string"
        }
      },
      "required": [
        "associationIds",
        "created",
        "internalUsername",
        "lastUpdated",
        "name",
        "owner",
        "uuid",
        "value"
      ]
    },
    "MetadataSchema": {
      "title": "MetadataSchema",
      "type": "object",
      "properties": {
        "created": {
          "description": "A timestamp indicating when this Metadata was created in the metadata schema store.",
          "type": "string",
          "format": "date-time"
        },
        "internalUsername": {
          "description": "The name of the Internal User, if any, who owns this schema.",
          "type": "string"
        },
        "lastUpdated": {
          "description": "A timestamp indicating when this Metadata was last updated in the metadata schema store.",
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "description": "The API user who owns this Schema.",
          "type": "string"
        },
        "schema": {
          "description": "A JSON Schema",
          "type": "string"
        },
        "uuid": {
          "description": "The UUID for this Schema.",
          "type": "string"
        }
      },
      "required": [
        "created",
        "internalUsername",
        "lastUpdated",
        "owner",
        "schema",
        "uuid"
      ]
    },
    "MonitoringTaskSummary": {
      "title": "MonitoringTaskSummary",
      "description": "A compressed description of a monitoring task",
      "type": "object",
      "properties": {
        "active": {
          "description": "Whether this monitor is currently active.",
          "type": "boolean",
          "default": true
        },
        "frequency": {
          "description": "The interval in minutes on which this monitor will run. Minimum is 5. Default is 720.",
          "type": "integer",
          "format": "int64"
        },
        "internalUsername": {
          "description": "Internal user account used to perform the check.",
          "type": "string"
        },
        "target": {
          "description": "The id of the sytem to be monitored. This must be an active system registered with the Systems service.",
          "type": "string"
        },
        "updateSystemStatus": {
          "description": "Whether this Monitor should update the system status when the results change. You must have the ADMIN role on the target system to use this feature.",
          "type": "boolean",
          "default": false
        },
        "id": {
          "description": "The unique id of the monitor",
          "type": "string"
        }
      },
      "required": [
        "active",
        "frequency",
        "target",
        "updateSystemStatus",
        "id"
      ]
    },
    "MonitoringTaskCheck": {
      "title": "MonitoringTaskCheck",
      "description": "An individual check made for a monitoring task. ",
      "type": "object",
      "properties": {
        "created": {
          "description": "A timestamp indicating when this monitor check was created.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The UUID for this monitor check.",
          "type": "string"
        },
        "message": {
          "description": "The error message if this monitor check failed.",
          "type": "string"
        },
        "result": {
          "description": "The results of this monitor check.",
          "$ref": "#/definitions/MonitorCheckResultType"
        }
      },
      "required": [
        "created",
        "id",
        "message",
        "result"
      ]
    },
    "NotificationRequest": {
      "title": "NotificationRequest",
      "type": "object",
      "properties": {
        "associatedUuid": {
          "description": "UUID of resource to whome the event applies.",
          "type": "string"
        },
        "url": {
          "description": "The url or email address that will be notified of the event.",
          "type": "string"
        },
        "persistent": {
          "description": "Whether this notification should stay active after it fires the first time.",
          "type": "boolean"
        }
      },
      "required": [
        "associatedUuid",
        "url",
        "persistent"
      ]
    },
    "NotificationResponse": {
      "title": "NotificationResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/Notification"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        },
        "version": {
          "description": "API version number",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status",
        "version"
      ]
    },
    "PostIt": {
      "title": "PostIt",
      "type": "object",
      "properties": {
        "created": {
          "description": "The creation date in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "creator": {
          "description": "The api user who made the PostIt creation request.",
          "type": "string"
        },
        "expires": {
          "description": "The expiration date in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "internalUsername": {
          "description": "The username of the internal user attached to this PostIt.",
          "type": "string"
        },
        "method": {
          "description": "The url that will be invoked when the PostIt is redeemed.",
          "type": "string"
        },
        "postit": {
          "description": "The PostIt nonce.",
          "type": "string"
        },
        "remainingUses": {
          "description": "The number of invocations remaining on this token. ",
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "description": "The url that will be invoked when the PostIt is redeemed.",
          "type": "string"
        },
        "noauth": {
          "description": "If true, the provided url will be called without authentication. Default is false",
          "type": "boolean"
        }
      },
      "required": [
        "created",
        "creator",
        "expires",
        "internalUsername",
        "method",
        "postit",
        "remainingUses",
        "url",
        "noauth"
      ]
    },
    "PostItRequestMethod": {
      "title": "PostItRequestMethod",
      "type": "string",
      "enum": [
        "GET",
        "PUT",
        "POST",
        "DELETE"
      ]
    },
    "PostItRequest": {
      "title": "PostItRequest",
      "type": "object",
      "properties": {
        "url": {
          "description": "The url that will be invoked when the PostIt is redeemed.",
          "type": "string"
        },
        "internalUsername": {
          "description": "The username of the internal user attached to this PostIt.",
          "type": "string"
        },
        "method": {
          "description": "The method that will be invoked when the PostIt is redeemed.",
          "$ref": "#/definitions/PostItRequestMethod"
        },
        "lifetime": {
          "description": "The maximum lifetime in seconds of this PostIt on this token. Defaults to 2592000 (30 days)",
          "type": "integer",
          "format": "int64"
        },
        "maxUses": {
          "description": "The maximum number of invocations remaining on this PostIt. Defaults to no limit",
          "type": "integer",
          "format": "int64"
        },
        "noauth": {
          "description": "If true, the provided url will be called without authentication. Default is false",
          "type": "boolean"
        }
      },
      "required": [
        "url",
        "internalUsername",
        "method",
        "lifetime",
        "maxUses",
        "noauth"
      ]
    },
    "SinglePostItResponse": {
      "title": "SinglePostItResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/PostIt"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "InternalUser": {
      "title": "InternalUser",
      "description": "A virtual user profile associated with a concrete api user",
      "type": "object",
      "properties": {
        "parent": {
          "description": "The uuid of the parent to which this internal user account belongs",
          "type": "string"
        },
        "created": {
          "description": "The date the internal user was created",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "description": "The date the internal user was last updated",
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "parent",
        "created",
        "lastUpdated"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Profile"
        }
      ]
    },
    "Gender": {
      "title": "Gender",
      "type": "string",
      "enum": [
        "male",
        "female"
      ]
    },
    "ProfileRequest": {
      "title": "ProfileRequest",
      "description": "A profile describing a new user to be created.",
      "type": "object",
      "properties": {
        "username": {
          "description": "The api user's unique username.",
          "type": "string"
        },
        "email": {
          "description": "The api user's unique email address.",
          "type": "string"
        },
        "city": {
          "description": "The api user's city.",
          "type": "string"
        },
        "country": {
          "description": "The api user's country.",
          "type": "string"
        },
        "department": {
          "description": "The api user's institutional department.",
          "type": "string"
        },
        "fax": {
          "description": "The api user's fax number.",
          "type": "string"
        },
        "firstName": {
          "description": "The api user's first name.",
          "type": "string"
        },
        "gender": {
          "description": "The api user's gender. male or female.",
          "$ref": "#/definitions/Gender"
        },
        "institution": {
          "description": "The api user's home institution",
          "type": "string"
        },
        "lastName": {
          "description": "The api user's last name.",
          "type": "string"
        },
        "phone": {
          "description": "The api user's phone number.",
          "type": "string"
        },
        "position": {
          "description": "The api user's position of employment.",
          "type": "string"
        },
        "researchArea": {
          "description": "The api user's primary area of research.",
          "type": "string"
        },
        "state": {
          "description": "The api user's state.",
          "type": "string"
        },
        "status": {
          "description": "The api user's status. active or deleted.",
          "type": "string"
        },
        "password": {
          "description": "The password to set for the new user",
          "type": "string"
        }
      },
      "required": [
        "username",
        "email",
        "password"
      ]
    },
    "Profile": {
      "title": "Profile",
      "description": "A user profile describing an actual user.",
      "type": "object",
      "properties": {
        "city": {
          "description": "The api user's city.",
          "type": "string"
        },
        "country": {
          "description": "The api user's country.",
          "type": "string"
        },
        "department": {
          "description": "The api user's institutional department.",
          "type": "string"
        },
        "email": {
          "description": "The api user's unique email address.",
          "type": "string"
        },
        "fax": {
          "description": "The api user's fax number.",
          "type": "string"
        },
        "firstName": {
          "description": "The api user's first name.",
          "type": "string"
        },
        "gender": {
          "description": "The api user's gender. male or female.",
          "$ref": "#/definitions/Gender"
        },
        "institution": {
          "description": "The api user's home institution",
          "type": "string"
        },
        "lastName": {
          "description": "The api user's last name.",
          "type": "string"
        },
        "phone": {
          "description": "The api user's phone number.",
          "type": "string"
        },
        "position": {
          "description": "The api user's position of employment.",
          "type": "string"
        },
        "researchArea": {
          "description": "The api user's primary area of research.",
          "type": "string"
        },
        "state": {
          "description": "The api user's state.",
          "type": "string"
        },
        "username": {
          "description": "The api user's unique username.",
          "type": "string"
        },
        "password": {
          "description": "The password to set for this profile",
          "type": "string"
        },
        "uuid": {
          "description": "The uuid of the user",
          "type": "string"
        }
      },
      "required": [
        "email",
        "username",
        "uuid"
      ]
    },
    "SingleInternalUserResponse": {
      "title": "SingleInternalUserResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/InternalUser"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "SingleProfileResponse": {
      "title": "SingleProfileResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/Profile"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "EmptySystemResponse": {
      "title": "EmptySystemResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "empty result",
          "type": "string"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "MultipleSystemResponse": {
      "title": "MultipleSystemResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "response body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SystemSummary"
          }
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "SingleSystemResponse": {
      "title": "SingleSystemResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/System"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "BatchQueue": {
      "title": "BatchQueue",
      "type": "object",
      "properties": {
        "customDirectives": {
          "description": "Any custom directives that should be appended to scheduler directives. ex. #$ -A TG-12345",
          "type": "string"
        },
        "isDefault": {
          "description": "Is this the default queue for the system.",
          "type": "boolean"
        },
        "maxJobs": {
          "description": "The maximum number of jobs that can be in queue at once.",
          "type": "integer",
          "format": "int64"
        },
        "maxUserJobs": {
          "description": "The maximum number of jobs per user that can be in queue at once.",
          "type": "integer",
          "format": "int64"
        },
        "maxNodes": {
          "description": "The max nodes available per node to jobs submitted to this queue.",
          "type": "string"
        },
        "maxMemoryPerNode": {
          "description": "The max memory available per node to jobs submitted to this queue.",
          "type": "string"
        },
        "maxProcessorsPerNode": {
          "description": "The max processors per node available to jobs submitted to this queue.",
          "type": "integer",
          "format": "int64"
        },
        "maxRequestedTime": {
          "description": "The max length of jobs submitted to this queue in hhh:mm:ss format.",
          "type": "string"
        },
        "name": {
          "description": "The name of the batch queue.",
          "type": "string"
        }
      },
      "required": [
        "customDirectives",
        "isDefault",
        "maxJobs",
        "maxUserJobs",
        "maxNodes",
        "maxMemoryPerNode",
        "maxProcessorsPerNode",
        "maxRequestedTime",
        "name"
      ]
    },
    "SystemLoginProtocolType": {
      "title": "SystemLoginProtocolType",
      "type": "string",
      "enum": [
        "GSISSH",
        "SSH",
        "LOCAL"
      ]
    },
    "SystemLoginConfig": {
      "title": "SystemLoginConfig",
      "type": "object",
      "properties": {
        "auth": {
          "description": "The default authentication credential used for this system.",
          "$ref": "#/definitions/SystemAuthConfig"
        },
        "host": {
          "description": "The hostname or ip address of the submission server",
          "type": "string"
        },
        "port": {
          "description": "The port number of the submission server.",
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "description": "The protocol used to authenticate to the submission server.",
          "$ref": "#/definitions/SystemLoginProtocolType"
        }
      },
      "required": [
        "auth",
        "host",
        "port",
        "protocol"
      ]
    },
    "SystemStorageProtocolType": {
      "title": "SystemStorageProtocolType",
      "type": "string",
      "enum": [
        "FTP",
        "GRIDFTP",
        "IRODS",
        "LOCAL",
        "S3",
        "SFTP"
      ]
    },
    "SystemStorageConfig": {
      "title": "SystemStorageConfig",
      "type": "object",
      "properties": {
        "auth": {
          "description": "The default authentication credential used for this system.",
          "$ref": "#/definitions/SystemAuthConfig"
        },
        "containerName": {
          "description": "The name of the bucket to interact with when using an object store.",
          "type": "string"
        },
        "homeDir": {
          "description": "The path on the remote system to use as the home directory for all API requests. For cases where the home directory should be dynamically defined, the ${USERNAME} token can be included in the homeDir value to represent the username of the authenticated user. ex. /home/${USERNAME}.",
          "type": "string",
          "default": "/"
        },
        "host": {
          "description": "The hostname or ip address of the storage server",
          "type": "string"
        },
        "port": {
          "description": "The port number of the storage server.",
          "type": "integer",
          "format": "int64"
        },
        "mirror": {
          "description": "Whether the permissions set on the server should be pushed to the storage system itself. This only applies to IRODS and AWS systems.",
          "type": "boolean",
          "default": false
        },
        "protocol": {
          "description": "The protocol used to authenticate to the storage server.",
          "$ref": "#/definitions/SystemStorageProtocolType"
        },
        "publicAppsDir": {
          "description": "The path on the remote system where apps will be stored if this is set as the default public storage system.",
          "type": "string"
        },
        "resource": {
          "description": "The name of the target resource when defining an IRODS system.",
          "type": "string"
        },
        "rootDir": {
          "description": "The path on the remote system to use as the root for all API requests.",
          "type": "string",
          "default": "/"
        },
        "zone": {
          "description": "The name of the zone when defining an IRODS system.",
          "type": "string"
        }
      },
      "required": [
        "auth",
        "host",
        "port",
        "protocol"
      ]
    },
    "SystemType": {
      "title": "SystemType",
      "type": "string",
      "enum": [
        "STORAGE",
        "EXECUTION"
      ]
    },
    "AuthenticationType": {
      "title": "AuthenticationType",
      "type": "string",
      "enum": [
        "APIKEYS",
        "LOCAL",
        "PAM",
        "PASSWORD",
        "SSHKEYS",
        "TOKEN",
        "X509",
        "ANONYMOUS"
      ]
    },
    "SystemCredential": {
      "title": "SystemCredential",
      "description": "Authentication credential for the default or internal user on a system",
      "type": "object",
      "properties": {
        "credential": {
          "description": "The credential used to authenticate to the remote system. Depending on the authentication protocol of the remote system, this could be an OAuth Token, X.509 certificate, Kerberose token, or an private key..",
          "type": "string"
        },
        "expirationDate": {
          "description": "The date the credential expires in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "internalUsername": {
          "description": "The username of the internal user associated with this credential.",
          "type": "string"
        },
        "isDefault": {
          "description": "Is this the default credential for this internal user of this type on this system?",
          "type": "boolean"
        },
        "parentType": {
          "description": "The system type this credential is associated with.",
          "$ref": "#/definitions/SystemType"
        },
        "password": {
          "description": "The password on the remote system used to authenticate.",
          "type": "string"
        },
        "publicKey": {
          "description": "The public ssh key used to authenticate to the remote system.",
          "type": "string"
        },
        "privateKey": {
          "description": "The public ssh key used to authenticate to the remote system..",
          "type": "string"
        },
        "server": {
          "description": "The server from which a credential may be obtained.",
          "$ref": "#/definitions/SystemAuthConfigServerProtocolType"
        },
        "type": {
          "description": "The authentication type.",
          "$ref": "#/definitions/AuthenticationType"
        },
        "username": {
          "description": "The local username on the remote system used to authenticate.",
          "type": "string"
        },
        "valid": {
          "description": "Is the credential still valid or has it expired?.",
          "type": "boolean"
        },
        "caCerts": {
          "description": "A public URL to the location of the trusted CA certs to use with this credential.",
          "type": "string"
        }
      },
      "required": [
        "credential",
        "expirationDate",
        "internalUsername",
        "isDefault",
        "parentType",
        "password",
        "publicKey",
        "privateKey",
        "server",
        "type",
        "username",
        "valid",
        "caCerts"
      ]
    },
    "SystemStatusType": {
      "title": "SystemStatusType",
      "type": "string",
      "enum": [
        "UP",
        "DOWN",
        "UNKNOWN"
      ]
    },
    "SystemSummary": {
      "title": "SystemSummary",
      "type": "object",
      "properties": {
        "description": {
          "description": "Verbose description of this system.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for this system.",
          "type": "string"
        },
        "isDefault": {
          "description": "Is the system the default for the authenticated user?",
          "type": "boolean"
        },
        "isPublic": {
          "description": "Is the system publicly available?",
          "type": "boolean"
        },
        "name": {
          "description": "Common name for this system.",
          "type": "string"
        },
        "status": {
          "description": "The status of this system. Systems must be in UP status to be used.",
          "$ref": "#/definitions/SystemStatusType"
        },
        "type": {
          "description": "The type of this system.",
          "$ref": "#/definitions/SystemType"
        }
      },
      "required": [
        "description",
        "id",
        "isDefault",
        "isPublic",
        "name",
        "status",
        "type"
      ]
    },
    "ApplicationExecutionType": {
      "title": "ApplicationExecutionType",
      "type": "string",
      "enum": [
        "HPC",
        "CONDOR",
        "CLI"
      ]
    },
    "BatchSchedulerType": {
      "title": "BatchSchedulerType",
      "type": "string",
      "enum": [
        "COBALT",
        "CONDOR",
        "FORK",
        "LOADLEVELER",
        "LSF",
        "MOAB",
        "PBS",
        "SGE",
        "SLURM",
        "TORQUE",
        "UNKNOWN"
      ]
    },
    "System": {
      "title": "System",
      "type": "object",
      "properties": {
        "description": {
          "description": "Verbose description of this system.",
          "type": "string"
        },
        "environment": {
          "description": "Environment variables to set upon login prior to job submission.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for this system.",
          "type": "string"
        },
        "isDefault": {
          "description": "Is the system the default for the authenticated user?",
          "type": "boolean",
          "default": false
        },
        "isPublic": {
          "description": "Is the system publicly available?",
          "type": "boolean",
          "default": false
        },
        "lastModified": {
          "description": "The date this system was last modified in ISO 8601 format.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Common name for this system.",
          "type": "string"
        },
        "revision": {
          "description": "The number of times this app has been updated.",
          "type": "integer",
          "default": 1,
          "format": "int64"
        },
        "scratchDir": {
          "description": "The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.",
          "type": "string"
        },
        "site": {
          "description": "The site associated with this system.",
          "type": "string"
        },
        "status": {
          "description": "The status of this system. Systems must be in UP status to be used.",
          "$ref": "#/definitions/SystemStatusType"
        },
        "storage": {
          "description": "The storage config defining how to connect to this system for data staging.",
          "$ref": "#/definitions/SystemStorageConfig"
        },
        "type": {
          "description": "The type of this system.",
          "$ref": "#/definitions/SystemType"
        },
        "uuid": {
          "description": "The uuid of this system.",
          "type": "string"
        }
      },
      "required": [
        "description",
        "id",
        "isDefault",
        "isPublic",
        "lastModified",
        "name",
        "revision",
        "storage",
        "type"
      ]
    },
    "SystemRequest": {
      "title": "SystemRequest",
      "type": "object",
      "properties": {
        "description": {
          "description": "Verbose description of this system.",
          "type": "string"
        },
        "environment": {
          "description": "Environment variables to set upon login prior to job submission.",
          "type": "string"
        },
        "executionType": {
          "description": "The execution paradigm used to run jobs on this system.",
          "$ref": "#/definitions/SystemExecutionType"
        },
        "id": {
          "description": "Unique identifier for this system.",
          "type": "string"
        },
        "login": {
          "description": "The login config defining how to connect to this system for job submission.",
          "$ref": "#/definitions/SystemLoginConfig"
        },
        "maxSystemJobs": {
          "description": "The maximum number of jobs that can be simultaneously run on the system across all queues.",
          "type": "integer",
          "format": "int64"
        },
        "maxSystemJobsPerUser": {
          "description": "The maximum number of jobs that can be simultaneously run on the system across all queues by a single user.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Common name for this system.",
          "type": "string"
        },
        "queues": {
          "description": "The execution paradigm used to run jobs on this system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BatchQueue"
          }
        },
        "scheduler": {
          "description": "The type of scheduled used to run jobs.",
          "$ref": "#/definitions/BatchSchedulerType"
        },
        "scratchDir": {
          "description": "The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.",
          "type": "string"
        },
        "site": {
          "description": "The site associated with this system.",
          "type": "string"
        },
        "startupScript": {
          "description": "Script to be run after login and prior to execution.",
          "type": "string"
        },
        "status": {
          "description": "The functional status of this system. Systems must be in UP status to be used.",
          "$ref": "#/definitions/SystemStatusType"
        },
        "storage": {
          "description": "The storage config defining how to connect to this system for data staging.",
          "$ref": "#/definitions/SystemStorageConfig"
        },
        "type": {
          "description": "The type of this system.",
          "$ref": "#/definitions/SystemType"
        },
        "workDir": {
          "description": "The work directory where job execution directories will be created at runtime. This is used if scratchDir is not specified. If neither are specified, the job directory will be created in the system homeDir.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "status",
        "storage",
        "type"
      ]
    },
    "ExecutionSystem": {
      "title": "ExecutionSystem",
      "description": "Represents a system used for running Application codes. Also has the ability to store data and participate in transfer operations.",
      "type": "object",
      "properties": {
        "executionType": {
          "description": "The execution paradigm used to run jobs on this system.",
          "$ref": "#/definitions/SystemExecutionType"
        },
        "login": {
          "description": "The login config defining how to connect to this system for job submission.",
          "$ref": "#/definitions/SystemLoginConfig"
        },
        "maxSystemJobs": {
          "description": "The maximum number of jobs that can be simultaneously run on the system across all queues.",
          "type": "integer",
          "format": "int64"
        },
        "maxSystemJobsPerUser": {
          "description": "The maximum number of jobs that can be simultaneously run on the system across all queues by a single user.",
          "type": "integer",
          "format": "int64"
        },
        "queues": {
          "description": "The execution paradigm used to run jobs on this system.",
          "$ref": "#/definitions/BatchQueue"
        },
        "scheduler": {
          "description": "The type of scheduled used to run jobs.",
          "$ref": "#/definitions/BatchSchedulerType"
        },
        "scratchDir": {
          "description": "The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.",
          "type": "string"
        },
        "workDir": {
          "description": "The work directory where job execution directories will be created at runtime. This is used if scratchDir is not specified. If neither are specified, the job directory will be created in the system homeDir.",
          "type": "string"
        },
        "startupScript": {
          "description": "Script to be run after login and prior to execution.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/SystemType",
          "default": "EXECUTION"
        }
      },
      "required": [
        "executionType",
        "login",
        "queues",
        "scheduler",
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/System"
        }
      ]
    },
    "SystemCredentialsResponse": {
      "title": "SystemCredentialsResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/SystemCredential"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "MultipleSystemRoleResponse": {
      "title": "MultipleSystemRoleResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "All matching roles for this system",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SystemRoleRequest"
          }
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "SystemRoleType": {
      "title": "SystemRoleType",
      "type": "string",
      "enum": [
        "GUEST",
        "USER",
        "PUBLISHER",
        "ADMIN",
        "OWNER"
      ]
    },
    "SystemLoginAuthenticationType": {
      "title": "SystemLoginAuthenticationType",
      "type": "string",
      "enum": [
        "APIKEYS",
        "LOCAL",
        "PAM",
        "PASSWORD",
        "SSHKEYS",
        "TOKEN",
        "X509"
      ]
    },
    "SystemAuthConfig": {
      "title": "SystemAuthConfig",
      "type": "object",
      "properties": {
        "credential": {
          "description": "The credential used to authenticate to the remote system. Depending on the authentication protocol of the remote system, this could be an OAuth Token, X.509 certificate, Kerberose token, or an private key..",
          "type": "string"
        },
        "internalUsername": {
          "description": "The username of the internal user associated with this credential.",
          "type": "string"
        },
        "password": {
          "description": "The password on the remote system used to authenticate.",
          "type": "string"
        },
        "publicKey": {
          "description": "The public ssh key used to authenticate to the remote system.",
          "type": "string"
        },
        "privateKey": {
          "description": "The public ssh key used to authenticate to the remote system..",
          "type": "string"
        },
        "server": {
          "description": "The server from which a credential may be obtained.",
          "$ref": "#/definitions/SystemAuthConfigServer"
        },
        "type": {
          "description": "The authentication type.",
          "$ref": "#/definitions/SystemLoginAuthenticationType"
        },
        "username": {
          "description": "The local username on the remote system used to authenticate.",
          "type": "string"
        },
        "caCerts": {
          "description": "A public URL to the location of the trusted CA certs to use with this credential.",
          "type": "string"
        }
      },
      "required": [
        "credential",
        "internalUsername",
        "password",
        "publicKey",
        "privateKey",
        "server",
        "type",
        "username",
        "caCerts"
      ]
    },
    "SystemAuthConfigServerProtocolType": {
      "title": "SystemAuthConfigServerProtocolType",
      "type": "string",
      "enum": [
        "MYPROXY",
        "MPG"
      ]
    },
    "SystemAuthConfigServer": {
      "title": "SystemAuthConfigServer",
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "The hostname or ip address of the remote server.",
          "type": "string"
        },
        "port": {
          "description": "The port number of the remote server..",
          "type": "integer",
          "format": "int64"
        },
        "protocol": {
          "description": "The protocol used to obtain a credential from the remote server.",
          "$ref": "#/definitions/SystemAuthConfigServerProtocolType"
        }
      },
      "required": [
        "endpoint",
        "port",
        "protocol"
      ]
    },
    "SystemActionType": {
      "title": "SystemActionType",
      "description": "The actions available on a system.",
      "type": "string",
      "enum": [
        "PUBLISH",
        "UNPUBLISH",
        "SETDEFAULT",
        "UNSETDEFAULT",
        "SETGLOBALDEFAULT",
        "UNSETGLOBALDEFAULT",
        "CLONE"
      ]
    },
    "SystemAction": {
      "title": "SystemAction",
      "description": "A generic action to apply to a system",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action to perform on the system.",
          "$ref": "#/definitions/SystemActionType"
        }
      },
      "required": [
        "action"
      ]
    },
    "MultipleTransformResponse": {
      "title": "MultipleTransformResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "description": "response body",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transform"
          }
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "SingleTransformResponse": {
      "title": "SingleTransformResponse",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/Transform"
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        }
      },
      "required": [
        "message",
        "result",
        "status"
      ]
    },
    "Transform": {
      "title": "Transform",
      "type": "object",
      "properties": {
        "decoders": {
          "description": "The available decoders for this transform.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransformDecoder"
          }
        },
        "description": {
          "description": "Description of this transform.",
          "type": "string"
        },
        "descriptionurl": {
          "description": "The URL to find out more information.",
          "type": "string"
        },
        "enabled": {
          "description": "Whether this transform is enabled or not.",
          "type": "boolean"
        },
        "encoder": {
          "description": "The encoder to use to convert to this format.",
          "$ref": "#/definitions/TransformEncoder"
        },
        "name": {
          "description": "The name of this transform.",
          "type": "string"
        },
        "tags": {
          "description": "The tags describing this transform.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "decoders",
        "description",
        "descriptionurl",
        "enabled",
        "encoder",
        "name",
        "tags"
      ]
    },
    "TransformRequest": {
      "title": "TransformRequest",
      "type": "object",
      "properties": {
        "nativeFormat": {
          "description": "The original file type of the file. If not given, the file type is assumed to be raw.",
          "type": "string"
        },
        "url": {
          "description": "The uri to which the transformed file will be staged.",
          "type": "string"
        },
        "callbackUrl": {
          "description": "The URI to notify when the transfer is complete. This can be an email address or http URL. If a URL is given, a GET will be made to this address. URL templating is supported. Valid template values are: ${NAME}, ${SOURCE_FORMAT}, ${DEST_FORMAT}, ${STATUS}",
          "type": "string"
        }
      },
      "required": [
        "nativeFormat",
        "url",
        "callbackUrl"
      ]
    },
    "ApplicationArgumentDataSemantics": {
      "title": "ApplicationArgumentDataSemantics",
      "description": "Describes the semantic definition of this inputs and the filetypes it represents. Multiple ontologies and values are supported.",
      "type": "object",
      "properties": {
        "fileTypes": {
          "description": "The file types acceptable for this input.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationArgumentSemantics"
        }
      ]
    },
    "ApplicationArgumentSemantics": {
      "title": "ApplicationArgumentSemantics",
      "description": "Describes the semantic definition of this input/output and the filetypes it represents. Multiple ontologies and values are supported. <a href=\"http://agaveapi.co/documentation/tutorials/app-management-tutorial/#app-outputs\">Read more.</a>",
      "type": "object",
      "properties": {
        "fileTypes": {
          "description": "The file types acceptable for this output.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxCardinality": {
          "description": "The maximum number of times this output may appear.",
          "type": "integer",
          "format": "int64"
        },
        "minCardinality": {
          "description": "The minimum number of times this output may appear. -1 is unlimited",
          "type": "integer",
          "format": "int64"
        },
        "ontology": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "fileTypes",
        "maxCardinality",
        "minCardinality",
        "ontology"
      ]
    },
    "ApplicationOutput": {
      "title": "ApplicationOutput",
      "description": "In addition to describing the inputs and parameters that your wrapper script requires, it is often helpful to provide the expected outputs when running your app. This is the purpose of the outputs attribute. App outputs specify an array of JSON objects describing the data that should be present when your app completes. It is entirely optional and provided, at this point in time, for reference purpose only.  <a href=\"http://agaveapi.co/documentation/tutorials/app-management-tutorial/#app-outputs\">Read more.</a>",
      "type": "object",
      "properties": {
        "semantics": {
          "description": "The ontologies for this output. ",
          "$ref": "#/definitions/ApplicationArgumentDataSemantics"
        }
      },
      "required": [
        "semantics"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationArgument"
        }
      ]
    },
    "ApplicationParameter": {
      "title": "ApplicationParameter",
      "description": "App parameters define the command-line arguments (flags, arguments, etc.) needed by your wrapper script in order to properly run your application code. <a href=\"http://agaveapi.co/documentation/tutorials/app-management-tutorial/#app-parameters\">Read more.</a>",
      "type": "object",
      "properties": {
        "value": {
          "description": "The inputs files for this parameter. ",
          "$ref": "#/definitions/AbstractApplicationParameterValue"
        }
      },
      "required": [
        "value"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationArgument"
        }
      ]
    },
    "ApplicationArgument": {
      "title": "ApplicationArgument",
      "description": "This is the base model for all Application input, output, and parameter objects.",
      "type": "object",
      "properties": {
        "details": {
          "description": "The details for this argument. ",
          "$ref": "#/definitions/ApplicationArgumentDetails"
        },
        "id": {
          "description": "The id of this argument. This will be the replacement string in your wrapper scripts.",
          "type": "string"
        },
        "semantics": {
          "description": "The semantic information for this output. ",
          "$ref": "#/definitions/ApplicationArgumentSemantics"
        },
        "value": {
          "description": "The validation and type information for this argument.",
          "$ref": "#/definitions/ApplicationArgumentValue"
        }
      },
      "required": [
        "details",
        "id",
        "semantics",
        "value"
      ]
    },
    "ApplicationParameterType": {
      "title": "ApplicationParameterType",
      "description": "The primary type of the application",
      "type": "string",
      "enum": [
        "STRING",
        "NUMBER",
        "BOOL",
        "FLAG"
      ]
    },
    "ApplicationParameterEnumValueItem": {
      "title": "ApplicationParameterEnumValueItem",
      "description": "Enumerated single attribute object representing an enumeration value for an ApplicationParamaeterEnumValue. While a single pimary type may be specified, an ApplicationParameterEnumValueItem is the recommended structure as it allows for better display for consumers rendering enumerated values as HTML select elemetns.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The enumerated value.",
          "type": "string"
        },
        "value": {
          "description": "The value of the enumeration to display in a dropdown list",
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "ApplicationActionType": {
      "title": "ApplicationActionType",
      "type": "string",
      "enum": [
        "CLONE",
        "PUBLISH",
        "UNPUBLISH",
        "ENABLE",
        "DISABLE"
      ]
    },
    "SystemRoleRequest": {
      "title": "SystemRoleRequest",
      "description": "A basic role granted to a user for a particular system",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username of the api user granted this role.",
          "type": "string"
        },
        "role": {
          "description": "The role granted this user.",
          "$ref": "#/definitions/SystemRoleType"
        }
      },
      "required": [
        "username",
        "role"
      ]
    },
    "TransferTaskProgressSummary": {
      "title": "TransferTaskProgressSummary",
      "description": "This represents a rollup of a data transfer operation.",
      "type": "object",
      "properties": {
        "averageRate": {
          "description": "Average transfer rate in bytes/sec",
          "type": "integer",
          "default": 0,
          "format": "int64"
        },
        "source": {
          "description": "The source URL of the transfer operation",
          "type": "string"
        },
        "totalActiveTransfers": {
          "description": "The number of concurrent transfers behind this transfer task",
          "type": "integer",
          "default": 0,
          "format": "int64"
        },
        "totalBytes": {
          "description": "The total number of bytes to be transferred",
          "type": "integer",
          "default": 0,
          "format": "int64"
        },
        "totalBytesTransferred": {
          "description": "The total number of bytes transferred thus far",
          "type": "integer",
          "default": 0,
          "format": "int64"
        },
        "totalFiles": {
          "description": "The total number of files transferred to date",
          "type": "integer",
          "default": 0,
          "format": "int64"
        },
        "uuid": {
          "description": "The id of the transfer task associated with this object",
          "type": "string"
        }
      },
      "required": [
        "averageRate",
        "source",
        "totalActiveTransfers",
        "totalBytes",
        "totalBytesTransferred",
        "totalFiles",
        "uuid"
      ]
    },
    "TransformEncoder": {
      "title": "TransformEncoder",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of what this encoder is and what it does.",
          "type": "string"
        },
        "name": {
          "description": "The encoder name.",
          "type": "string"
        }
      },
      "required": [
        "description",
        "name"
      ]
    },
    "FilesStatusType": {
      "title": "FilesStatusType",
      "type": "string",
      "enum": [
        "PREPROCESSING",
        "STAGING_QUEUED",
        "STAGING",
        "STAGING_COMPLETED",
        "STAGING_FAILED",
        "TRANSFORMING_QUEUED",
        "TRANSFORMING",
        "TRANSFORMING_FAILED",
        "TRANSFORMING_COMPLETED"
      ]
    },
    "FileMkdirAction": {
      "title": "FileMkdirAction",
      "description": "Request for a new directory to be created on the target system. This will recursively create missing directories.",
      "type": "object",
      "properties": {
        "path": {
          "description": "Absolute or relative path of the new directory",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/FileManagementActionType",
          "default": "MKDIR"
        }
      },
      "required": [
        "path",
        "action"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/FileAction"
        }
      ]
    },
    "FileRenameAction": {
      "title": "FileRenameAction",
      "description": "Request for a file/folder to be renamed on the target system. Metadata will be preserved after rename. Rename operations are only applied relative to the file/folder given in the URL. To rename a file/folder to a different path, see the FileMoveAction.",
      "type": "object",
      "properties": {
        "path": {
          "description": "New name of the file or folder specified in the URL. ",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/FileManagementActionType",
          "default": "RENAME"
        }
      },
      "required": [
        "path",
        "action"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/FileAction"
        }
      ]
    },
    "FileMoveAction": {
      "title": "FileMoveAction",
      "description": "Request for a file/folder to be moved on the target system. Metadata will be preserved after move.",
      "type": "object",
      "properties": {
        "path": {
          "description": "The relative or absolute path of the renamed file/folder. ",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/FileManagementActionType",
          "default": "MOVE"
        }
      },
      "required": [
        "path",
        "action"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/FileAction"
        }
      ]
    },
    "FileCopyAction": {
      "title": "FileCopyAction",
      "description": "Request for a file/folder to be copied on the target system. Metadata will be appended to the destination if it already exists. Otherwise, a new history will be created.",
      "type": "object",
      "properties": {
        "path": {
          "description": "New name of the file or folder specified in the URL. ",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/FileManagementActionType",
          "default": "COPY"
        },
        "append": {
          "description": "True if the contents of the source file should be appended to the end of file given in the URL.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "path",
        "action",
        "append"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/FileAction"
        }
      ]
    },
    "ClientAPISubscriptionStatusType": {
      "title": "ClientAPISubscriptionStatusType",
      "type": "string",
      "enum": [
        "CREATED",
        "PROTOTYPED",
        "PUBLISHED",
        "DEPRECATED",
        "RETIRED",
        "BLOCKED"
      ]
    },
    "TransformDecoder": {
      "title": "TransformDecoder",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of what this decoder is and what it does.",
          "type": "string"
        },
        "name": {
          "description": "The decoder name.",
          "type": "string"
        }
      },
      "required": [
        "description",
        "name"
      ]
    },
    "AgaveNullResponse": {
      "title": "AgaveNullResponse",
      "description": "Null response from the API",
      "type": "object",
      "properties": {
        "result": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AgaveResponse"
        }
      ]
    },
    "ApplicationAction": {
      "title": "ApplicationAction",
      "description": "Generic action to take on an app",
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/ApplicationActionType"
        }
      },
      "required": [
        "action"
      ]
    },
    "ApplicationPublishAction": {
      "title": "ApplicationPublishAction",
      "description": "Publishes an app into the public space for anyone to use.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The new name of the app after publication",
          "type": "string"
        },
        "version": {
          "description": "The new version of the app after publication",
          "type": "string"
        },
        "executionSystem": {
          "description": "The id of the public system on which this app will run after publication",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/ApplicationActionType",
          "default": "PUBLISH"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationAction"
        }
      ]
    },
    "ApplicationCloneAction": {
      "title": "ApplicationCloneAction",
      "description": "Clones an existing app for private use.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The new name of the app after cloning",
          "type": "string"
        },
        "version": {
          "description": "The new version of the app after cloning",
          "type": "string"
        },
        "executionSystem": {
          "description": "The id of the private system on which this app will run after publication",
          "type": "string"
        },
        "deploymentSystem": {
          "description": "The id of the system on which the app assets will be stored after cloning",
          "type": "string"
        },
        "deploymentPath": {
          "description": "The path on the deployment system where the app assets will be copied during cloning",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/ApplicationActionType",
          "default": "CLONE"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationAction"
        }
      ]
    },
    "ApplicationEnableAction": {
      "title": "ApplicationEnableAction",
      "description": "Make a disabled application available once again.",
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/ApplicationActionType",
          "default": "ENABLE"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationAction"
        }
      ]
    },
    "ApplicationDisableAction": {
      "title": "ApplicationDisableAction",
      "description": "Disables an app from use.",
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/ApplicationActionType",
          "default": "DISABLE"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationAction"
        }
      ]
    },
    "ApplicationUnpublishAction": {
      "title": "ApplicationUnpublishAction",
      "description": "Removes an app from the public scope. ",
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/ApplicationActionType",
          "default": "UNPUBLISH"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApplicationAction"
        }
      ]
    },
    "FileType": {
      "title": "FileType",
      "description": "The type of the remote file/folder",
      "type": "string",
      "enum": [
        "FILE",
        "DIR",
        "UNKNOWN"
      ]
    },
    "JobStopAction": {
      "title": "JobStopAction",
      "description": "Requests that a currently active job be killed.",
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/JobActionType",
          "default": "STOP"
        }
      },
      "required": [
        "action"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/JobAction"
        }
      ]
    },
    "JobResubmitAction": {
      "title": "JobResubmitAction",
      "description": "Resubmits the given job as a new job with a unique id. The archive system and path are reset. All other fields remain unchanged. Notifications set for the original job will not carry over.",
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/JobActionType",
          "default": "RESUBMIT"
        }
      },
      "required": [
        "action"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/JobAction"
        }
      ]
    },
    "MonitoringTaskDetails": {
      "title": "MonitoringTaskDetails",
      "description": "Detailed description of a monitoring task",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique id of the monitoring task",
          "type": "string"
        },
        "lastSuccess": {
          "description": "The last time the monitoring task had a successful check",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "description": "The last time the monitor was updated",
          "type": "string",
          "format": "date-time"
        },
        "nextUpdate": {
          "description": "The next time the check will run",
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "description": "The user who created the monitoring task",
          "type": "string"
        },
        "lastCheck": {
          "description": "A summary of the result of the last check run for this monitoring task",
          "$ref": "#/definitions/MonitoringTaskCheck"
        }
      },
      "required": [
        "id",
        "lastSuccess",
        "lastUpdated",
        "nextUpdate",
        "owner"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MonitoringTaskSummary"
        }
      ]
    },
    "StorageSystem": {
      "title": "StorageSystem",
      "description": "Represents a storage system used for data movement and transfer operations.",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SystemType",
          "default": "STORAGE"
        }
      },
      "required": [
        "type"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/System"
        }
      ]
    },
    "FilePermission": {
      "title": "FilePermission",
      "description": "A permission grant for a single file or folder.",
      "type": "object",
      "properties": {
        "permission": {
          "description": "The permisisons associated with this objectf",
          "$ref": "#/definitions/FilePermissionStanza"
        },
        "recursive": {
          "description": "Boolean flag indicating whether the permission applies recursively to the remote file item.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "permission"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Permission"
        }
      ]
    },
    "Permission": {
      "title": "Permission",
      "description": "A generic permission applied to any resource in the API",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username to whom this permission grant applies",
          "type": "string"
        },
        "internalUsername": {
          "description": "The internal user associated with this permission",
          "type": "string"
        },
        "permission": {
          "description": "The permissions granted to the user",
          "$ref": "#/definitions/PermissionStanza"
        },
        "created": {
          "description": "The date the permission was created",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "description": "The date the permission was last updated",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The unique id of this permission",
          "type": "string"
        }
      },
      "required": [
        "username",
        "permission",
        "created",
        "lastUpdated",
        "id"
      ]
    },
    "FilePermissionStanza": {
      "title": "FilePermissionStanza",
      "description": "A permission object describing read, write, and execute permission for a file item.",
      "type": "object",
      "properties": {
        "execute": {
          "description": "Is the resource executable",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "execute"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/PermissionStanza"
        }
      ]
    },
    "SystemRole": {
      "title": "SystemRole",
      "description": "A role granted a user on a system",
      "type": "object",
      "properties": {
        "username": {
          "description": "The username to whom the role applies.",
          "type": "string"
        },
        "role": {
          "description": "The role granted to the suer",
          "$ref": "#/definitions/SystemRoleType"
        },
        "created": {
          "description": "The date the role was first granted",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "description": "The date the role was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The unique id of this role grant",
          "type": "string"
        }
      },
      "required": [
        "username",
        "role",
        "created",
        "lastUpdated",
        "id"
      ]
    },
    "SystemPublishAction": {
      "title": "SystemPublishAction",
      "description": "Promote the system into the public space for all tenant users to utilize as a shared resource.",
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "default": "PUBLISH"
        }
      },
      "required": [
        "action"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SystemAction"
        }
      ]
    },
    "SystemCloneAction": {
      "title": "SystemCloneAction",
      "description": "Clone an existing system as a new system. Auth credentials will not be cloned on the new system.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique name for new system",
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SystemAction"
        }
      ]
    },
    "HistoryEvent": {
      "title": "HistoryEvent",
      "description": "A generic history event representing a change on a resource or one of its associations.",
      "type": "object",
      "properties": {
        "created": {
          "description": "The date of the event.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "A brief description of the event details.",
          "type": "string"
        },
        "status": {
          "description": "The status of the file/folder after this event.",
          "type": "string"
        },
        "progress": {
          "description": "A summary progress report of the transfer operation associated with this file event, if any.",
          "$ref": "#/definitions/TransferTaskProgressSummary"
        }
      },
      "required": [
        "created",
        "description",
        "status"
      ]
    },
    "FileImportRequest": {
      "title": "FileImportRequest",
      "description": "File import request to copy a file from an accessible URL.",
      "type": "object",
      "properties": {
        "fileType": {
          "description": "The file format this file is in. Defaults to raw. This will be used in file transform operations.",
          "type": "string"
        },
        "notifications": {
          "description": "Notifications to set with the successful acceptance of this upload request",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationRequest"
          }
        },
        "fileName": {
          "description": "The name to give the upload file. If unset, takes the original file name.",
          "type": "string"
        },
        "append": {
          "description": "Boolean flag indicating this file should be appended to the target file",
          "type": "boolean",
          "default": false
        },
        "urlToImport": {
          "description": "The URL to import the file from. This parameter is used if not file is uploaded with this post.",
          "type": "string"
        }
      }
    },
    "UUIDRequest": {
      "description": "Request object to create a new UUID",
      "type": "object",
      "properties": {
        "type": {
          "description": "The resource type for which the UUID should be created.",
          "type": "string"
        }
      }
    },
    "UUIDSummary": {
      "description": "Resource to which a tag has been associated",
      "type": "object",
      "properties": {
        "message": {
          "description": "success or failure",
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UUIDResolution"
          }
        },
        "status": {
          "description": "success or failure",
          "type": "string"
        },
        "version": {
          "description": "API version number",
          "type": "string"
        }
      }
    },
    "UUIDResolution": {
      "description": "Resource to which a tag has been associated",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "uuid created/requested",
          "type": "string"
        },
        "type": {
          "description": "the resource type represented by this uuid",
          "type": "string"
        },
        "representation": {
          "description": "the full object representation for this uuid",
          "type": "object"
        }
      }
    }
  }
}