/* ASTParser.java */
/* Generated By:JavaCC: Do not edit this line. ASTParser.java */
/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package edu.utexas.tacc.tapis.search.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;
import java.lang.UnsupportedOperationException;

import edu.utexas.tacc.tapis.search.parser.Token;
import org.apache.commons.lang3.StringUtils;
import org.apache.activemq.filter.ConstantExpression;
import org.apache.activemq.util.LRUCache;

import edu.utexas.tacc.tapis.search.parser.ASTNode;
import edu.utexas.tacc.tapis.search.parser.ASTBinaryExpression;
import edu.utexas.tacc.tapis.search.parser.ASTUnaryExpression;
import edu.utexas.tacc.tapis.search.parser.ASTLeaf;

/*
 * DO NOTE EDIT
 * DO NOTE EDIT the .java file directly - it is autogenerated from ASTParser.jj
 * DO NOTE EDIT
 * Tapis AST parser generated by JavaCC
 * Based on JMS Selector Parser from ActiveMQ
 *
 * Map of Sql operators to Tapis operators
 *   =           -> EQ
 *   <>          -> NEQ
 *   <           -> LT
 *   <=          -> LTE
 *   >           -> GT
 *   >=          -> GTE
 *   LIKE        -> LIKE
 *   NOT LIKE    -> NLIKE
 *   BETWEEN     -> BETWEEN
 *   NOT BETWEEN -> NBETWEEN
 *   IN          -> IN
 *   NOT IN      -> NIN
 *
 * NOTES:
 *   - Specifying an escape character for LIKE is not supported.
 *   - String values must be surrounded by single quotes
 *   - Values for BETWEEN must be surrounded by single quotes
 *   - TODO/TBD: Following operations are not supported:
 *      IS NULL, IS NOT NULL
 *      Arithmetic operations (+, -, /, *, mod)
 *      Unary operators (-, NOT)
 */
public class ASTParser implements ASTParserConstants {
  private static final Map<String, Object> cache = Collections.synchronizedMap(new LRUCache<>(100));

  public static ASTNode parse(String sql) throws UnsupportedOperationException
  {
    // Look for result in the cache
    Object result = cache.get(sql);
    // If result was an exception we are done
    if (result instanceof UnsupportedOperationException) { throw (UnsupportedOperationException) result; }
    // If we have already resolved the string to a node we are done
    else if (result instanceof ASTNode) { return (ASTNode) result; }
    else
    {
      // Result not in cache, convert sql string to a ASTNode
      try
      {
        // Recursive call to continue processing
        ASTNode node = new ASTParser(sql).parse();
        // Cache the result
        cache.put(sql, node);
        return node;
      }
      catch (UnsupportedOperationException t)
      {
        cache.put(sql, t);
        throw t;
      }
    }
  }

  public static void clearCache() { cache.clear(); }

  private String sql;

  protected ASTParser(String sql)
  {
    this(new StringReader(sql));
    this.sql = sql;
  }

  protected ASTNode parse() throws UnsupportedOperationException
  {
    // This kicks off execution of our grammar defined below
    // Variable sql contains the string to be processed
    try { return this.GetNode(); }
    catch (Throwable e) { throw new UnsupportedOperationException(sql, e); }
  }

  // ---------------------------------------------------------------------
  // Utility methods used by grammar to build ASTNode objects
  // ---------------------------------------------------------------------

  // ============================
  // conjunction / disjunction
  // ============================
  private ASTBinaryExpression createOR(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("OR", l, r);
  }
  private ASTBinaryExpression createAND(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("AND", l, r);
  }
  // ======================
  // equalityExpression()
  // ======================
  private ASTBinaryExpression createEqual(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("EQ", l, r);
  }
  private ASTBinaryExpression createNotEqual(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("NEQ", l, r);
  }
  // TODO/TBD: IS NULL is not the same as = null
  // TODO/TBD: Do not support IS NULL ?
  private ASTBinaryExpression createIsNull(ASTNode l)
  {
    return new ASTBinaryExpression("=", l, new ASTLeaf("NULL"));
  }
  // TODO/TBD: IS NOT NULL is not the same as <> null
  // TODO/TBD: Do not support IS NOT NULL ?
  private ASTBinaryExpression createIsNotNull(ASTNode l)
  {
    return new ASTBinaryExpression("<>", l, new ASTLeaf("NULL"));
  }
  // ======================
  // comparisonExpression()
  // ======================
  private ASTBinaryExpression createGreaterThan(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("GT", l, r);
  }
  private ASTBinaryExpression createGreaterThanEqual(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("GTE", l, r);
  }
  private ASTBinaryExpression createLessThan(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("LT", l, r);
  }
  private ASTBinaryExpression createLessThanEqual(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("LTE", l, r);
  }
  private ASTBinaryExpression createLike(ASTNode l, String s)
  {
    return new ASTBinaryExpression("LIKE", l, new ASTLeaf(s));
  }
  private ASTBinaryExpression createNotLike(ASTNode l, String s)
  {
    return new ASTBinaryExpression("NLIKE", l, new ASTLeaf(s));
  }
  private ASTBinaryExpression createBetween(ASTNode l, String low, String high)
  {
    String s = low + "," + high;
    return new ASTBinaryExpression("BETWEEN", l, new ASTLeaf(s));
  }
  private ASTBinaryExpression createNotBetween(ASTNode l, String low, String high)
  {
    String s = low + "," + high;
    return new ASTBinaryExpression("NBETWEEN", l, new ASTLeaf(s));
  }
  private ASTBinaryExpression createInList(ASTNode l, List<String> list)
  {
    StringJoiner sj = new StringJoiner(",");
    for (String s : list) { sj.add(s); }
    return new ASTBinaryExpression("IN", l, new ASTLeaf(sj.toString()));
  }
  private ASTBinaryExpression createNotInList(ASTNode l, List<String> list)
  {
    StringJoiner sj = new StringJoiner(",");
    for (String s : list) { sj.add(s); }
    return new ASTBinaryExpression("NIN", l, new ASTLeaf(sj.toString()));
  }
  // ======================
  // addExpression()
  // TODO/TBD: Do not support numeric operations?
  // ======================
  private ASTBinaryExpression createPlus(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("+", l, r);
  }
  private ASTBinaryExpression createMinus(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("-", l, r);
  }
  // ======================
  // multExpression()
  // TODO/TBD: Do not support numeric operations?
  // ======================
  private ASTBinaryExpression createMultiply(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("*", l, r);
  }
  private ASTBinaryExpression createDivide(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("/", l, r);
  }
  private ASTBinaryExpression createMod(ASTNode l, ASTNode r)
  {
    return new ASTBinaryExpression("%", l, r);
  }
  // ======================
  // unaryExpression()
  // TODO/TBD: Do not support unary operations?
  // ======================
  private ASTUnaryExpression createNegate(ASTNode n)
  {
    return new ASTUnaryExpression("-", n);
  }
  private ASTUnaryExpression createNOT(ASTNode n)
  {
    return new ASTUnaryExpression("NOT", n);
  }

// ----------------------------------------------------------------------------
// Grammar
// ----------------------------------------------------------------------------
  final public ASTNode GetNode() throws ParseException {ASTNode left=null;
    left = orExpression();
    jj_consume_token(0);
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public ASTNode orExpression() throws ParseException {ASTNode left;
    ASTNode right;
    left = andExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
      right = andExpression();
left = createOR(left, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public ASTNode andExpression() throws ParseException {ASTNode left;
    ASTNode right;
    left = equalityExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      right = equalityExpression();
left = createAND(left, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public ASTNode equalityExpression() throws ParseException {ASTNode left;
    ASTNode right;
    left = comparisonExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IS:
      case 26:
      case 27:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 26:{
        jj_consume_token(26);
        right = comparisonExpression();
left = createEqual(left, right);
        break;
        }
      case 27:{
        jj_consume_token(27);
        right = comparisonExpression();
left = createNotEqual(left, right);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_1(2)) {
          jj_consume_token(IS);
          jj_consume_token(NULL);
left = createIsNull(left);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IS:{
            jj_consume_token(IS);
            jj_consume_token(NOT);
            jj_consume_token(NULL);
left = createIsNotNull(left);
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public ASTNode comparisonExpression() throws ParseException {ASTNode left, right;
    String low, high, t;
    boolean not;
    ArrayList<String> list;
    left = addExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case BETWEEN:
      case LIKE:
      case IN:
      case 28:
      case 29:
      case 30:
      case 31:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 28:{
        jj_consume_token(28);
        right = addExpression();
left = createGreaterThan(left, right);
        break;
        }
      case 29:{
        jj_consume_token(29);
        right = addExpression();
left = createGreaterThanEqual(left, right);
        break;
        }
      case 30:{
        jj_consume_token(30);
        right = addExpression();
left = createLessThan(left, right);
        break;
        }
      case 31:{
        jj_consume_token(31);
        right = addExpression();
left = createLessThanEqual(left, right);
        break;
        }
      case LIKE:{
        jj_consume_token(LIKE);
        t = stringLiteral();
left = createLike(left, t);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        if (jj_2_2(2)) {
          jj_consume_token(NOT);
          jj_consume_token(LIKE);
          t = stringLiteral();
left = createNotLike(left, t);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BETWEEN:{
            jj_consume_token(BETWEEN);
            low = stringLiteral();
            jj_consume_token(AND);
            high = stringLiteral();
left = createBetween(left, low, high);
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            if (jj_2_3(2)) {
              jj_consume_token(NOT);
              jj_consume_token(BETWEEN);
              low = stringLiteral();
              jj_consume_token(AND);
              high = stringLiteral();
left = createNotBetween(left, low, high);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case IN:{
                jj_consume_token(IN);
                jj_consume_token(32);
                t = stringLiteral();
list = new ArrayList<>();
                    list.add( t );
                label_5:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case 33:{
                    ;
                    break;
                    }
                  default:
                    jj_la1[6] = jj_gen;
                    break label_5;
                  }
                  jj_consume_token(33);
                  t = stringLiteral();
list.add( t );
                }
                jj_consume_token(34);
left = createInList(left, list);
                break;
                }
              default:
                jj_la1[10] = jj_gen;
                if (jj_2_4(2)) {
                  jj_consume_token(NOT);
                  jj_consume_token(IN);
                  jj_consume_token(32);
                  t = stringLiteral();
list = new ArrayList<>();
                    list.add( t );
                  label_6:
                  while (true) {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case 33:{
                      ;
                      break;
                      }
                    default:
                      jj_la1[7] = jj_gen;
                      break label_6;
                    }
                    jj_consume_token(33);
                    t = stringLiteral();
list.add( t );
                  }
                  jj_consume_token(34);
left = createNotInList(left, list);
                } else {
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public ASTNode addExpression() throws ParseException {ASTNode left;
    ASTNode right;
    left = multExpr();
    label_7:
    while (true) {
      if (jj_2_5(2147483647)) {
        ;
      } else {
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 35:{
        jj_consume_token(35);
        right = multExpr();
left = createPlus(left, right);
        break;
        }
      case 36:{
        jj_consume_token(36);
        right = multExpr();
left = createMinus(left, right);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public ASTNode multExpr() throws ParseException {ASTNode left;
    ASTNode right;
    left = unaryExpr();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 37:
      case 38:
      case 39:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 37:{
        jj_consume_token(37);
        right = unaryExpr();
left = createMultiply(left, right);
        break;
        }
      case 38:{
        jj_consume_token(38);
        right = unaryExpr();
left = createDivide(left, right);
        break;
        }
      case 39:{
        jj_consume_token(39);
        right = unaryExpr();
left = createMod(left, right);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public ASTNode unaryExpr() throws ParseException {String s=null;
    ASTNode left=null;
    if (jj_2_6(2147483647)) {
      jj_consume_token(35);
      left = unaryExpr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 36:{
        jj_consume_token(36);
        left = unaryExpr();
left = createNegate(left);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        left = unaryExpr();
left = createNOT(left);
        break;
        }
      case TRUE:
      case FALSE:
      case NULL:
      case DECIMAL_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case ID:
      case 32:{
        left = primaryExpr();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

// For literals and <ID> this is the bottom for recursion
// A single sql of "a = 'b'" ends up here and calls idAsUnary
  final public ASTNode primaryExpr() throws ParseException {ASTNode left=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case DECIMAL_LITERAL:
    case HEX_LITERAL:
    case OCTAL_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:{
      left = literal();
      break;
      }
    case ID:{
      left = idAsUnary();
      break;
      }
    case 32:{
      jj_consume_token(32);
      left = orExpression();
      jj_consume_token(34);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public ASTLeaf literal() throws ParseException {Token t;
    String s;
    ASTLeaf left=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL:{
      s = stringLiteral();
left = new ASTLeaf(s);
      break;
      }
    case DECIMAL_LITERAL:{
      t = jj_consume_token(DECIMAL_LITERAL);
left = new ASTLeaf(ConstantExpression.createFromDecimal(t.image).toString());
      break;
      }
    case HEX_LITERAL:{
      t = jj_consume_token(HEX_LITERAL);
left = new ASTLeaf(ConstantExpression.createFromHex(t.image).toString());
      break;
      }
    case OCTAL_LITERAL:{
      t = jj_consume_token(OCTAL_LITERAL);
left = new ASTLeaf(ConstantExpression.createFromOctal(t.image).toString());
      break;
      }
    case FLOATING_POINT_LITERAL:{
      t = jj_consume_token(FLOATING_POINT_LITERAL);
left = new ASTLeaf(ConstantExpression.createFloat(t.image).toString());
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
left = new ASTLeaf("TRUE");
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
left = new ASTLeaf("FALSE");
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
left = new ASTLeaf("NULL");
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  final public String stringLiteral() throws ParseException {Token t;
    StringBuilder rc = new StringBuilder();
    boolean first=true;
    t = jj_consume_token(STRING_LITERAL);
// Decode the string value.
        String image = t.image;
        for( int i=1; i < image.length()-1; i++ ) {
            char c = image.charAt(i);
            if( c == '\'' )
                i++;
               rc.append(c);
        }
        {if ("" != null) return rc.toString();}
    throw new Error("Missing return statement in function");
}

  final public ASTUnaryExpression idAsUnary() throws ParseException {Token t;
    t = jj_consume_token(ID);
{if ("" != null) return new ASTUnaryExpression("", new ASTLeaf(t.image));}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_literal_655_9_29()
 {
    if (jj_scan_token(OCTAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_stringLiteral_702_5_36()) return true;
    return false;
  }

  private boolean jj_3R_multExpr_558_9_16()
 {
    if (jj_scan_token(37)) return true;
    if (jj_3R_unaryExpr_585_5_10()) return true;
    return false;
  }

  private boolean jj_3R_multExpr_558_9_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_multExpr_558_9_16()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_multExpr_563_9_17()) return false;
    jj_scanpos = xsp;
    if (jj_3R_multExpr_568_9_18()) return true;
    return false;
  }

  private boolean jj_3R_comparisonExpression_454_13_51()
 {
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_stringLiteral_702_5_36()) return true;
    return false;
  }

  private boolean jj_3R_literal_648_9_28()
 {
    if (jj_scan_token(HEX_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_multExpr_556_5_9()
 {
    if (jj_3R_unaryExpr_585_5_10()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_multExpr_558_9_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_orExpression_359_9_35()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_andExpression_376_5_34()) return true;
    return false;
  }

  private boolean jj_3R_comparisonExpression_449_13_50()
 {
    if (jj_scan_token(31)) return true;
    if (jj_3R_addExpression_529_5_41()) return true;
    return false;
  }

  private boolean jj_3R_literal_641_9_27()
 {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_comparisonExpression_444_13_49()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_addExpression_529_5_41()) return true;
    return false;
  }

  private boolean jj_3R_orExpression_357_5_25()
 {
    if (jj_3R_andExpression_376_5_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_orExpression_359_9_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_addExpression_538_13_55()
 {
    if (jj_scan_token(36)) return true;
    if (jj_3R_multExpr_556_5_9()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(35)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    if (jj_3R_multExpr_556_5_9()) return true;
    return false;
  }

  private boolean jj_3R_literal_634_9_26()
 {
    if (jj_3R_stringLiteral_702_5_36()) return true;
    return false;
  }

  private boolean jj_3R_comparisonExpression_439_13_48()
 {
    if (jj_scan_token(29)) return true;
    if (jj_3R_addExpression_529_5_41()) return true;
    return false;
  }

  private boolean jj_3R_addExpression_533_13_54()
 {
    if (jj_scan_token(35)) return true;
    if (jj_3R_multExpr_556_5_9()) return true;
    return false;
  }

  private boolean jj_3R_literal_633_5_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_literal_634_9_26()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_literal_641_9_27()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_literal_648_9_28()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_literal_655_9_29()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_literal_662_9_30()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_literal_669_9_31()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_literal_676_9_32()) return false;
    jj_scanpos = xsp;
    if (jj_3R_literal_683_9_33()) return true;
    return false;
  }

  private boolean jj_3R_comparisonExpression_434_13_47()
 {
    if (jj_scan_token(28)) return true;
    if (jj_3R_addExpression_529_5_41()) return true;
    return false;
  }

  private boolean jj_3R_comparisonExpression_434_13_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_comparisonExpression_434_13_47()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_comparisonExpression_439_13_48()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_comparisonExpression_444_13_49()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_comparisonExpression_449_13_50()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_comparisonExpression_454_13_51()) return false;
    jj_scanpos = xsp;
    if (!jj_3_2()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_comparisonExpression_465_13_52()) return false;
    jj_scanpos = xsp;
    if (!jj_3_3()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_comparisonExpression_476_13_53()) return false;
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    return false;
  }

  private boolean jj_3R_addExpression_531_9_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_addExpression_533_13_54()) return false;
    jj_scanpos = xsp;
    if (jj_3R_addExpression_538_13_55()) return true;
    return false;
  }

  private boolean jj_3R_idAsUnary_721_5_24()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_addExpression_529_5_41()
 {
    if (jj_3R_multExpr_556_5_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_addExpression_531_9_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_primaryExpr_619_9_22()
 {
    if (jj_scan_token(32)) return true;
    if (jj_3R_orExpression_357_5_25()) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3R_comparisonExpression_431_5_39()
 {
    if (jj_3R_addExpression_529_5_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_comparisonExpression_434_13_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_primaryExpr_617_9_21()
 {
    if (jj_3R_idAsUnary_721_5_24()) return true;
    return false;
  }

  private boolean jj_3R_primaryExpr_615_9_20()
 {
    if (jj_3R_literal_633_5_23()) return true;
    return false;
  }

  private boolean jj_3R_comparisonExpression_505_21_57()
 {
    if (jj_scan_token(33)) return true;
    if (jj_3R_stringLiteral_702_5_36()) return true;
    return false;
  }

  private boolean jj_3R_primaryExpr_614_5_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_primaryExpr_615_9_20()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_primaryExpr_617_9_21()) return false;
    jj_scanpos = xsp;
    if (jj_3R_primaryExpr_619_9_22()) return true;
    return false;
  }

  private boolean jj_3R_equalityExpression_413_9_45()
 {
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_stringLiteral_702_5_36()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_unaryExpr_599_9_15()
 {
    if (jj_3R_primaryExpr_614_5_19()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(35)) return true;
    if (jj_3R_unaryExpr_585_5_10()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(32)) return true;
    if (jj_3R_stringLiteral_702_5_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_comparisonExpression_505_21_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3R_unaryExpr_594_9_14()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_unaryExpr_585_5_10()) return true;
    return false;
  }

  private boolean jj_3R_equalityExpression_402_9_44()
 {
    if (jj_scan_token(27)) return true;
    if (jj_3R_comparisonExpression_431_5_39()) return true;
    return false;
  }

  private boolean jj_3R_comparisonExpression_484_21_56()
 {
    if (jj_scan_token(33)) return true;
    if (jj_3R_stringLiteral_702_5_36()) return true;
    return false;
  }

  private boolean jj_3R_unaryExpr_589_9_13()
 {
    if (jj_scan_token(36)) return true;
    if (jj_3R_unaryExpr_585_5_10()) return true;
    return false;
  }

  private boolean jj_3R_literal_683_9_33()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_equalityExpression_397_9_43()
 {
    if (jj_scan_token(26)) return true;
    if (jj_3R_comparisonExpression_431_5_39()) return true;
    return false;
  }

  private boolean jj_3R_equalityExpression_397_9_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_equalityExpression_397_9_43()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_equalityExpression_402_9_44()) return false;
    jj_scanpos = xsp;
    if (!jj_3_1()) return false;
    jj_scanpos = xsp;
    if (jj_3R_equalityExpression_413_9_45()) return true;
    return false;
  }

  private boolean jj_3R_unaryExpr_586_9_12()
 {
    if (jj_scan_token(35)) return true;
    if (jj_3R_unaryExpr_585_5_10()) return true;
    return false;
  }

  private boolean jj_3R_unaryExpr_585_5_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_unaryExpr_586_9_12()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_unaryExpr_589_9_13()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_unaryExpr_594_9_14()) return false;
    jj_scanpos = xsp;
    if (jj_3R_unaryExpr_599_9_15()) return true;
    return false;
  }

  private boolean jj_3R_literal_676_9_32()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_equalityExpression_394_5_37()
 {
    if (jj_3R_comparisonExpression_431_5_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_equalityExpression_397_9_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_comparisonExpression_476_13_53()
 {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(32)) return true;
    if (jj_3R_stringLiteral_702_5_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_comparisonExpression_484_21_56()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(34)) return true;
    return false;
  }

  private boolean jj_3R_literal_669_9_31()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_stringLiteral_702_5_36()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_stringLiteral_702_5_36()) return true;
    return false;
  }

  private boolean jj_3R_andExpression_378_9_38()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_equalityExpression_394_5_37()) return true;
    return false;
  }

  private boolean jj_3R_multExpr_568_9_18()
 {
    if (jj_scan_token(39)) return true;
    if (jj_3R_unaryExpr_585_5_10()) return true;
    return false;
  }

  private boolean jj_3R_literal_662_9_30()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_comparisonExpression_465_13_52()
 {
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_stringLiteral_702_5_36()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_stringLiteral_702_5_36()) return true;
    return false;
  }

  private boolean jj_3R_multExpr_563_9_17()
 {
    if (jj_scan_token(38)) return true;
    if (jj_3R_unaryExpr_585_5_10()) return true;
    return false;
  }

  private boolean jj_3R_andExpression_376_5_34()
 {
    if (jj_3R_equalityExpression_394_5_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_andExpression_378_9_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ASTParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x400,0x200,0xc008000,0xc000000,0x8000,0xf0005900,0x0,0x0,0xf0001000,0x800,0x4000,0x0,0x0,0x0,0x37f0100,0x37f0000,0x17f0000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x18,0xe0,0xe0,0x11,0x1,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ASTParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ASTParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ASTParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ASTParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ASTParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ASTParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ASTParser(ASTParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ASTParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[40];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 17; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 40; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 6; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
